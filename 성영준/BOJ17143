import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.concurrent.PriorityBlockingQueue;

public class Main {
	static Shark[][] grid;

	static class Shark implements Comparable<Shark> {
		int r, c, s, d, z;

		public Shark(int r, int c, int s, int d, int z) {
			this.r = r;
			this.c = c;
			this.s = s;
			this.d = d;
			this.z = z;
		}

		@Override
		public int compareTo(Shark o) {
			return o.z - z;
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int r = Integer.parseInt(st.nextToken());
		int c = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());

		Queue<Shark> q = new PriorityBlockingQueue<>();
		grid = new Shark[r + 2][c + 2];
		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int sr = Integer.parseInt(st.nextToken());
			int sc = Integer.parseInt(st.nextToken());
			int ss = Integer.parseInt(st.nextToken());
			int sd = Integer.parseInt(st.nextToken());
			if (sd > 2)
				ss %= (c - 1) * 2;
			else
				ss %= (r - 1) * 2;
			Shark newShark = new Shark(sr, sc, ss, sd, Integer.parseInt(st.nextToken()));
			q.add(newShark);
			grid[sr][sc] = newShark;
		}

		int cnt = 0;
		for (int i = 1; i <= c; i++) {
			for (int j = 1; j <= r; j++) {
				if (grid[j][i] == null)
					continue;
				q.remove(grid[j][i]);
				cnt += grid[j][i].z;
				grid[j][i] = null;
				break;
			}
			q = move(q, r, c);
		}

		System.out.println(cnt);
	}

	private static Queue<Shark> move(Queue<Shark> q, int r, int c) {
		Queue<Shark> newQ = new PriorityBlockingQueue<>();
		Shark[][] newGrid = new Shark[r + 2][c + 2];

		while (!q.isEmpty()) {
			Shark now = q.poll();
			int nowS = now.s;

			if (now.d > 2) {
				while (true) {
					if (now.d == 3) {
						if (c - now.c >= nowS) {
							now.c += nowS;
							break;
						}
						nowS -= c - now.c;
						now.c = c;
						now.d = 4;
					} else {
						if (now.c > nowS) {
							now.c -= nowS;
							break;
						}
						nowS -= now.c - 1;
						now.c = 1;
						now.d = 3;
					}
				}
			} else {
				while (true) {
					if (now.d == 2) {
						if (r - now.r >= nowS) {
							now.r += nowS;
							break;
						}
						nowS -= r - now.r;
						now.r = r;
						now.d = 1;
					} else {
						if (now.r > nowS) {
							now.r -= nowS;
							break;
						}
						nowS -= now.r - 1;
						now.r = 1;
						now.d = 2;
					}
				}
			}

			if (newGrid[now.r][now.c] != null)
				continue;

			Shark newShark = new Shark(now.r, now.c, now.s, now.d, now.z);
			newGrid[now.r][now.c] = newShark;
			newQ.add(newShark);
		}

		grid = newGrid;
		return newQ;
	}
}
